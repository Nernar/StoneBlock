const requireMethodFromNativeAPI = ModAPI.requireGlobal("requireMethodFromNativeAPI");
const teleportTo = requireMethodFromNativeAPI("api.NativeAPI", "teleportTo");

const StoneBlock = (function() {
	let dimension = new Dimensions.CustomDimension("Stone", 9669);
	dimension.setSkyColor(.4, .4, .5);
	dimension.setFogColor(.3, .3, .5);
	dimension.setHasSkyLight(false);
	let generator = Dimensions.newGenerator({
		base: "overworld",
		// generateVanillaStructures: false,
		// buildVanillaSurfaces: false,
		layers: [
			{
				minY: 251, maxY: 252,
				yConversion: [[.0, .0], [.0, .0]],
				material: { base: 11 }
			}, {
				minY: 251, maxY: 252,
				yConversion: [[.0, .0], [.0, .0]],
				material: { base: 213 },
				noise: {
					octaves: { count: 1, scale: 5 }
				}
			}, {
				minY: 250, maxY: 251,
				yConversion: [[.0, .0], [.0, .0]],
				material: { base: 7 }
			}, {
				minY: 12, maxY: 250,
				yConversion: [[.0, .0], [.0, .0]],
				material: { base: 1 }
			}, {
				minY: 10, maxY: 12,
				yConversion: [[.0, .0], [.0, .0]],
				material: { base: 7 }
			}
		]
	});
	// generator.setGenerateModStructures(false);
	dimension.setGenerator(generator);
	return dimension;
})();

const STONE_BLOCK_ROOM_HEIGHT = 110;

let procedure$addQuestBookIntoTargetSlot = function(playerUid) {
	let slot = Player.getInventorySlot(8);
	if (slot && slot.id == 0) {
		Player.setInventorySlot(8, ItemID.bqt, 1, 0);
		return;
	}
	Player.addItemToInventory(ItemID.bqt, 1, 0);
};

let nextToBeAboutThinked;
let generationChunkX;
let generationChunkZ;

let procedure$generateFoldikHell = function() {
	nextToBeAboutThinked.y = STONE_BLOCK_ROOM_HEIGHT;
	let cp = nextToBeAboutThinked;
	generationChunkX = Math.floor(cp.x / 16);
	generationChunkZ = Math.floor(cp.z / 16);
	procedure$addQuestBookIntoTargetSlot();
};

let procedure$buildTargetSpawnRoom = function() {
	// alert("Starting room creation");
	
	let cp = nextToBeAboutThinked;
	nextToBeAboutThinked = undefined;
	
	for (let gx = -5; gx < 5; gx++)
		for (let gy = -3; gy < 5; gy++)
			for (let gz = -5; gz < 5; gz++)
				if (gx * gx + gy * gy + gz * gz <= 20)
					World.setBlock(cp.x + gx, cp.y + gy, cp.z + gz, 0);
	
	World.setBlock(cp.x + 3, cp.y - 2, cp.z + 3, 0);
	World.setBlock(cp.x - 3, cp.y - 2, cp.z + 3, 0);
	World.setBlock(cp.x + 3, cp.y - 2, cp.z - 3, 0);
	World.setBlock(cp.x - 3, cp.y - 2, cp.z - 3, 0);
	
	World.setBlock(cp.x, cp.y - 3, cp.z, 50, 0);
	
	// procedure$notifyRoomPrepared();
	// alert("Room generated");
};

// TODO: Move to Java otherwise it may extremely laggy
Callback.addCallback('GenerateCustomDimensionChunk', function(chunkX, chunkZ, random, dimensionId, chunkSeed, worldSeed, dimensionSeed) {
	if (nextToBeAboutThinked && dimensionId == StoneBlock.id) {
		// Nearest chunks will be generated by pattern too
		//   *   
		// * % * 
		//   *   
		if (generationChunkX == chunkX && generationChunkZ == chunkZ) {
			procedure$buildTargetSpawnRoom();
			teleported = true;
			// alert("2");
		}
		// alert("3");
	}
	// Logger.Log("custom " + dimensionId + ", " + chunkX + ", " + chunkZ);
});

let procedure$transferIntoHellWithoutDamage = function() {
	let playerUid = Player.get();
	Entity.addEffect(playerUid, Native.PotionEffect.fireResistance, 0, 5, 1, false);
	Dimensions.transfer(playerUid, StoneBlock.id);
};

let procedure$notifyRoomPrepared = function(playerUid) {
	Entity.setVelocity(playerUid, 0, 0, 0);
	let cp = Entity.getPosition(playerUid);
	// alert("You're must be teleported");
	teleportTo(playerUid, cp.x, STONE_BLOCK_ROOM_HEIGHT - 3, cp.z);
};

let pleaseCaptureMeImLostInSurface = false;
// let testToBeCapturedByFuckingInnerCore = false;
let displayed = false;
let teleported = false;

Callback.addCallback('LevelDisplayed', function() {
	displayed = true;
	// alert("displayed again and again");
	if (!teleported || pleaseCaptureMeImLostInSurface) {
		procedure$transferIntoHellWithoutDamage();
		pleaseCaptureMeImLostInSurface = false;
	} else if (nextToBeAboutThinked) {
		procedure$generateFoldikHell();
	}
	// if (testToBeCapturedByFuckingInnerCore) {
		// procedure$notifyRoomPrepared();
		// testToBeCapturedByFuckingInnerCore = false;
	// }
});

Callback.addCallback('LevelLeft', function() {
	displayed = false;
});

/*
Callback.addCallback("ServerPlayerTick", function(playerUid, isPlayerDead) {
// каждый тик создаем новый интерфейс для последующего использвание
	var players = Network.getConnectedPlayers();
	for (let i in players) var CurrPlayer = new PlayerActor(players[i]);
});
*/

Callback.addCallback('DimensionLoaded', function(dimension) {
	// alert("1");
	if (dimension == StoneBlock.id) {
		let player = Player.get();
		if (!teleported) {
			nextToBeAboutThinked = Entity.getPosition(player);
			if (displayed) procedure$generateFoldikHell();
			// testToBeCapturedByFuckingInnerCore = true;
			return;
		}
		// alert("Already teleported");
		// procedure$notifyRoomPrepared();
	} else if (dimension == 0) {
		if (displayed) {
			procedure$transferIntoHellWithoutDamage();
			return;
		}
		pleaseCaptureMeImLostInSurface = true;
	}
});

Callback.addCallback("PlayerChangedDimension", function(playerUid, currentId, lastId) {
	if (currentId == StoneBlock.id) {
		// let player = new PlayerActor(playerUid);
		// alert("Player in current " + currentId + ", at last " + lastId);
		procedure$notifyRoomPrepared(playerUid);
	}
});

Saver.addSavesScope('teleported',
	function read(scope) {
		teleported = scope.teleported;
	},
	function save() {
		return { 
			teleported: teleported,
		};
	});
